
#Область Служебные

&НаСервере
Процедура УправлениеЭлементамиФормы()

	Элементы.ГруппаПериод.Доступность = Объект.Активно;
	
	Элементы.ГруппаВидСобытияПриСозданииНового.Видимость = Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.кзоВидыСобытийПравилЗаполнения.СозданиеНового");
	Элементы.ГруппаВидСобытияЗаполнение.Видимость = Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.кзоВидыСобытийПравилЗаполнения.Заполнение");
	Элементы.ГруппаВидСобытияСобытиеЭлементаФормы.Видимость = Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.кзоВидыСобытийПравилЗаполнения.СобытиеЭлементаФормы");
	
	Элементы.ГруппаОтборОбъектов.Видимость = кзоЗаполнение.ИспользуетсяОтбор(Объект.ВидСобытия);	
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьНаименование()
	
	Если НЕ ИспользуетсяПроизвольноеНаименование Тогда
		Объект.Наименование = Справочники.кзоПравилаЗаполнения.СформироватьНаименование(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьДанныеТаблицыЗаполнение()
	
	Для каждого Строка Из Объект.Заполнение Цикл
		
		Поле = Новый ПолеКомпоновкиДанных(Строка.ИмяРеквизита);
		ДоступноеПоле = КомпоновщикЗаполнение.Настройки.ДоступныеПоляВыбора.НайтиПоле(Поле);
		Если ДоступноеПоле = Неопределено Тогда
			Строка.Заголовок = "<...>";
			Продолжить;
		КонецЕсли;
		
		Строка.Использование = Истина;
		Строка.ИмяРеквизита = ДоступноеПоле.Поле;
		Строка.ТипЗначения = ДоступноеПоле.ТипЗначения;
		Строка.Заголовок = ДоступноеПоле.Заголовок;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПримерПрограммногоКода()

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		"// Пример:", , WebЦвета.Зеленый)
	);
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		"
		|Объект.ИмяРеквизита = """";
		|Объект.ИмяТабличнойЧасти.ИмяРеквизита = """";
		|")
	);
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		"// В событиях заполнения ""При нажатию на кнопку Заполнить"" и ""Событие интерфейса""
		|// доступна Форма - ФормаКлиентскогоПриложения", , WebЦвета.Зеленый)
	);
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		"
		|ТекущаяСтрока = Объект.ИмяТабличнойЧасти.НайтиПоИдентификатору(Форма.Элементы.ИмяТабличнойЧасти.ТекущаяСтрока);
		|ТекущаяСтрока.ИмяКолонки = ТекущаяСтрока.ИмяКолонки + 1;")
	);
	
	ПримерПрограммногоКода.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(МассивСтрок));
	
КонецПроцедуры

#КонецОбласти

#Область СКД

&НаСервере
Процедура ЗаполнитьКомпоновщикНастроек()
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектМетаданных) Тогда
		Возврат;	
	КонецЕсли;
	
	СКД = кзоСКД.СоздатьСКД(Объект.ОбъектМетаданных);	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище);
	
	КомпоновщикОтбор.Инициализировать(ИсточникНастроек);	
	КомпоновщикОтбор.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	КомпоновщикЗаполнение.Инициализировать(ИсточникНастроек);	
	КомпоновщикЗаполнение.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьОтборНастройкиКомпоновки()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");	
		Настройки = ДокументОбъект.ХранилищеНастроек.Получить();
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		Настройки = Параметры.ЗначениеКопирования.ХранилищеНастроек.Получить();
		
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	НастройкиКомпоновки = КомпоновщикОтбор.ПолучитьНастройки();	
	кзоСКД.ЗаполнитьОтборИзМассива(НастройкиКомпоновки.Отбор, Настройки.НастройкиОтбора);
	КомпоновщикОтбор.ЗагрузитьНастройки(НастройкиКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ВыбратьПолеЗаполнения(Команда)
	
	ДоступныеПоляЗаполненияВыбор(Команда, Элементы.ДоступныеПоляЗаполнения.ТекущаяСтрока, Элементы.ДоступныеПоляЗаполнения, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСобытийЭлементовФорм(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ОбъектМетаданных", Объект.ОбъектМетаданных));
	
	ОткрытьФорму("Справочник.кзоСобытияЭлементовФорм.ФормаВыбора", ПараметрыФормы, Элементы.СобытияЭлементовФорм, КлючУникальности, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияЭлементовФормОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для каждого Событие Из ВыбранноеЗначение Цикл
		Отбор = Новый Структура("СобытиеЭлементаФормы", Событие);
		НайденныеСтроки = Объект.СобытияЭлементовФорм.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = Объект.СобытияЭлементовФорм.Добавить();
		Строка.СобытиеЭлементаФормы = Событие;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	УстановитьПримерПрограммногоКода();
		
	НаименованиеПриИзмененииНаСервере();
	УправлениеЭлементамиФормы();
	ДополнитьДанныеТаблицыЗаполнение();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПриСозданииЧтенииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Активно = Истина;
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	ЗаполнитьКомпоновщикНастроек();		
	ВосстановитьОтборНастройкиКомпоновки();
		
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Настройки = Новый Структура("НастройкиОтбора");
	Настройки.НастройкиОтбора = кзоСКД.ПоместитьОтборВМассив(КомпоновщикОтбор.ПолучитьНастройки().Отбор);
	
	ТекущийОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПриСозданииЧтенииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		ИспользуетсяПроизвольноеНаименование = Объект.Наименование <> Справочники.кзоПравилаЗаполнения.СформироватьНаименование(Объект);
	Иначе
		ИспользуетсяПроизвольноеНаименование = Ложь;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;	
    СтруктураПараметров.Вставить("ОписаниеТипов", кзоСлужебные.ПолучитьТипыОбъектовДляЗаполнения());
	
    ОписаниеОповещения = Новый ОписаниеОповещения("ОбъектМетаданныхНачалоВыбораЗавершение", ЭтаФорма);
	
    ОткрытьФорму("ОбщаяФорма.кзоВыборТипаОбъекта", СтруктураПараметров, Элемент, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхНачалоВыбораЗавершение(Значение, ДополнительнеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ОбъектМетаданныхНачалоВыбораЗавершениеНаСервере(Значение);	
	
КонецПроцедуры

&НаСервере
Процедура ОбъектМетаданныхНачалоВыбораЗавершениеНаСервере(Тип) Экспорт
	
	Объект.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип);
	Объект.Заполнение.Очистить();
	
	ЗаполнитьКомпоновщикНастроек();
	ЗаполнитьНаименование();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПоляЗаполненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДоступноеПоле = КомпоновщикЗаполнение.Настройки.ДоступныеПоляВыбора.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока);	
	Если ДоступноеПоле.Таблица 
		ИЛИ ДоступноеПоле.Папка
		ИЛИ Найти(ДоступноеПоле.Поле, ".") > 0
		Тогда
		Возврат;	
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяРеквизита", Строка(ДоступноеПоле.Поле));
	Если Объект.Заполнение.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Строка = Объект.Заполнение.Добавить();
	Строка.Использование = Истина;
	Строка.ИмяРеквизита = ДоступноеПоле.Поле;
	Строка.ТипЗначения = ДоступноеПоле.ТипЗначения;
	Строка.Заголовок = ДоступноеПоле.Заголовок;
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПоляДляОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтборПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АктивноПриИзменении(Элемент)	
	УправлениеЭлементамиФормы();	
КонецПроцедуры

&НаКлиенте
Процедура ВидСобытияПриИзменении(Элемент)
	
	Если Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.кзоВидыСобытийПравилЗаполнения.СозданиеНового") Тогда
		Объект.ИспользоватьПриЗаполнении = Ложь;	
		Объект.ИспользоватьПриНажатииНаКнопку = Ложь;	
		
		Объект.СобытияЭлементовФорм.Очистить();
		
	ИначеЕсли Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.кзоВидыСобытийПравилЗаполнения.Заполнение") Тогда
		Объект.ИспользоватьПриСоздании = Ложь;	
		Объект.ИспользоватьПриКопировании = Ложь;
		
		Объект.СобытияЭлементовФорм.Очистить();
		
	ИначеЕсли Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.кзоВидыСобытийПравилЗаполнения.СобытиеЭлементаФормы") Тогда
		Объект.ИспользоватьПриСоздании = Ложь;	
		Объект.ИспользоватьПриКопировании = Ложь;
		
		Объект.ИспользоватьПриЗаполнении = Ложь;	
		Объект.ИспользоватьПриНажатииНаКнопку = Ложь;
		
	Иначе
		Объект.ИспользоватьПриСоздании = Ложь;	
		Объект.ИспользоватьПриКопировании = Ложь;
		
		Объект.ИспользоватьПриЗаполнении = Ложь;	
		Объект.ИспользоватьПриНажатииНаКнопку = Ложь;
		
		Объект.СобытияЭлементовФорм.Очистить();
	КонецЕсли;
	
	ЗаполнитьНаименование();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти
