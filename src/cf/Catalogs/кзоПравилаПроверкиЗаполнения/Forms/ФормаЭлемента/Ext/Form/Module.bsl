
#Область Служебные

&НаСервере
Процедура УправлениеЭлементамиФормы()

	Элементы.ГруппаПериод.Доступность = Объект.Активно;
	Элементы.Основание.Видимость = ЗначениеЗаполнено(Объект.Основание);
	Элементы.КомпоновщикОтборЗаполнитьПоОснованиюОтбор.Видимость = ЗначениеЗаполнено(Объект.Основание);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТаблиц()
	
	Элементы.ИмяТаблицы.СписокВыбора.Очистить();
	Элементы.ИмяТаблицы.СписокВыбора.Добавить("");
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектМетаданных, "ЗначениеПустойСсылки");
	Мета = Ссылка.Метаданные();
	
	НедоступныеРеквизиты = Новый Массив;
	
	Для каждого ТабличнаяЧасть Из Мета.ТабличныеЧасти Цикл
		Если НедоступныеРеквизиты.Найти(ТабличнаяЧасть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.ИмяТаблицы.СписокВыбора.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Синоним);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименование()
	
	Если НЕ ИспользуетсяПроизвольноеНаименование Тогда
		Объект.Наименование = Справочники.кзоПравилаПроверкиЗаполнения.СформироватьНаименование(Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ОбновитьПоОснованиюОтбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Основание) Тогда
		Возврат;
	КонецЕсли;

	ЗагрузитьОтборИзОснования();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоОснованиюПроверки(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Основание) Тогда
		Возврат;
	КонецЕсли;

	ЗагрузитьПравилаПроверкиИзОснования();
	
КонецПроцедуры

#КонецОбласти

#Область СКД

&НаСервере
Процедура ЗаполнитьКомпоновщикНастроек()
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектМетаданных) Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьКомпоновщикОтбор();
	ЗаполнитьКомпоновщикПроверки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомпоновщикОтбор()
	
	СКД = кзоСКД.СоздатьСКДсОграничениямиПолей(Объект.ОбъектМетаданных, Объект.ИмяТаблицы, Ложь);	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище);
	
	КомпоновщикОтбор.Инициализировать(ИсточникНастроек);	
	КомпоновщикОтбор.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомпоновщикПроверки()
	
	СКД = кзоСКД.СоздатьСКДсОграничениямиПолей(Объект.ОбъектМетаданных, Объект.ИмяТаблицы);	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище);
	
	КомпоновщикПроверки.Инициализировать(ИсточникНастроек);	
	КомпоновщикПроверки.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьОтборНастройкиКомпоновки()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");	
		Настройки = ДокументОбъект.ХранилищеНастроек.Получить();
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		Тогда
		Настройки = Параметры.ЗначениеКопирования.ХранилищеНастроек.Получить();
		
	ИначеЕсли Параметры.Свойство("Основание") 
		И ЗначениеЗаполнено(Параметры.Основание)
		Тогда
		
		ЗагрузитьОтборИзОснования();
		ЗагрузитьПравилаПроверкиИзОснования();
		Возврат;					
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если Настройки.Свойство("НастройкиОтбора") Тогда
		НастройкиКомпоновки = КомпоновщикОтбор.ПолучитьНастройки();	
		кзоСКД.ЗаполнитьОтборИзМассива(НастройкиКомпоновки.Отбор, Настройки.НастройкиОтбора);
		КомпоновщикОтбор.ЗагрузитьНастройки(НастройкиКомпоновки);
	КонецЕсли;
	
	Если Настройки.Свойство("НастройкиПроверки") Тогда
		НастройкиКомпоновки = КомпоновщикПроверки.ПолучитьНастройки();	
		кзоСКД.ЗаполнитьОтборИзМассива(НастройкиКомпоновки.Отбор, Настройки.НастройкиПроверки);
		КомпоновщикПроверки.ЗагрузитьНастройки(НастройкиКомпоновки);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОтборИзОснования()

	Если ТипЗнч(Объект.Основание) = Тип("СправочникСсылка.кзоПравилаЗаполнения") Тогда
		
		Настройки = Объект.Основание.ХранилищеНастроек.Получить();
		Если Настройки.Свойство("НастройкиОтбора") Тогда
			НастройкиКомпоновки = КомпоновщикОтбор.ПолучитьНастройки();	
			кзоСКД.ЗаполнитьОтборИзМассива(НастройкиКомпоновки.Отбор, Настройки.НастройкиОтбора);
			КомпоновщикОтбор.ЗагрузитьНастройки(НастройкиКомпоновки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПравилаПроверкиИзОснования()

	Если ТипЗнч(Объект.Основание) = Тип("СправочникСсылка.кзоПравилаЗаполнения") Тогда
		
		// Конвертируем правила заполнения в проверки
		Контейнер = Справочники.кзоПравилаПроверкиЗаполнения.ЗаполнениеИзПравилВОтбор(Объект.Основание);
		НастройкиКомпоновки = КомпоновщикПроверки.ПолучитьНастройки();
		кзоСКД.ЗаполнитьОтборИзМассива(НастройкиКомпоновки.Отбор, Контейнер);
		КомпоновщикПроверки.ЗагрузитьНастройки(НастройкиКомпоновки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Активно = Истина;
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;				
	КонецЕсли;
	
	ЗаполнитьКомпоновщикНастроек();		
	ВосстановитьОтборНастройкиКомпоновки();
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПриСозданииЧтенииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	НаименованиеПриИзмененииНаСервере();	
	ЗаполнитьСписокТаблиц();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Настройки = Новый Структура("НастройкиОтбора, НастройкиПроверки");
	Настройки.НастройкиОтбора = кзоСКД.ПоместитьОтборВМассив(КомпоновщикОтбор.ПолучитьНастройки().Отбор);
	Настройки.НастройкиПроверки = кзоСКД.ПоместитьОтборВМассив(КомпоновщикПроверки.ПолучитьНастройки().Отбор);
	
	ТекущийОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		ИспользуетсяПроизвольноеНаименование = Объект.Наименование <> Справочники.кзоПравилаПроверкиЗаполнения.СформироватьНаименование(Объект);	
	Иначе
		ИспользуетсяПроизвольноеНаименование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;	
    СтруктураПараметров.Вставить("ОписаниеТипов", кзоСлужебные.ПолучитьТипыОбъектовПроверкиЗаполнения());
	
    ОписаниеОповещения = Новый ОписаниеОповещения("ОбъектМетаданныхНачалоВыбораЗавершение", ЭтаФорма);
	
    ОткрытьФорму("ОбщаяФорма.кзоВыборТипаОбъекта", СтруктураПараметров, Элемент, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхНачалоВыбораЗавершение(Значение, ДополнительнеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ОбъектМетаданныхНачалоВыбораЗавершениеНаСервере(Значение);	
	
КонецПроцедуры

&НаСервере
Процедура ОбъектМетаданныхНачалоВыбораЗавершениеНаСервере(Тип) Экспорт
	
	Объект.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип);
	
	ЗаполнитьКомпоновщикНастроек();
	ЗаполнитьНаименование();
	ЗаполнитьСписокТаблиц();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяТаблицыПриИзменении(Элемент)
	
	ЗаполнитьКомпоновщикНастроек();
	ЗаполнитьНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПоляДляОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтборПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПоляПроверкиЗаполненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикПроверкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикПроверкиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АктивноПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

#КонецОбласти
