
#Область ПрограммныйИнтерфейс

// Возвращает разделитель реквизита табличной части
// 
// Возвращаемое значение:
//  Строка - Разделитель
//
Функция РазделительРеквизитаТабличнойЧасти() Экспорт
	Возврат "_Т_";		
КонецФункции

// Создает и заполняет таблицу данных для помещения в качестве источника в СКД
//
// Параметры:
//  Объект		 - СправочникОбъект, ДокументОбъект, ДанныеФормы - Любой объект базы данных
//  ИмяТаблицы	 - Строка										 - Имя таблицы объекта
//  Метаданные	 - Метаданные								 	 - Метаданные объекта
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с данными для помещения в источник СКД
//
Функция СоздатьДанныеСКД(Объект, ИмяТаблицы, Метаданные) Экспорт
	
	ТаблицаДанных = ДанныеСКДПолучитьПустуюТаблицу(Метаданные, ИмяТаблицы);	
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		ТабличнаяЧасть = Метаданные.ТабличныеЧасти[ИмяТаблицы];
		
		Для каждого Строка Из Объект[ИмяТаблицы] Цикл
			НоваяСтрока = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
			
			НоваяСтрока[ИмяТаблицы + РазделительРеквизитаТабличнойЧасти() + "НомерСтроки"] = Строка.НомерСтроки;
			
			// Заполним данные табличной части
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				ИмяКолонки = ИмяТаблицы + РазделительРеквизитаТабличнойЧасти() + Реквизит.Имя;
				НоваяСтрока[ИмяКолонки] = Строка[Реквизит.Имя];	
			КонецЦикла; 			
		КонецЦикла;
		
	Иначе
		// Заполним данные объекта
		НоваяСтрока = ТаблицаДанных.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
	КонецЕсли;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает и заполняет схему компоновки данных по объекту метаданных
//
// Параметры:
//  ОбъектМетаданных - СправочникСслка.ИдентификаторыОбъектовМетаданных	 - Объект метаданных
//  ИмяТаблицы		 - Строка											 - Имя таблицы объекта
// 
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - Схема компоновки данных
//
Функция СоздатьСКД(ОбъектМетаданных, ИмяТаблицы = Неопределено) Экспорт	
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	// Подготавливаем данные
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));	
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИмяОбъекта = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	УстановитьСтруктуруПолейСКД(НаборДанных, ОбъектМетаданных, ИмяТаблицы);	
	
	Возврат СКД;
	
КонецФункции

// Создает и заполняет схему компоновки данных по объекту метаданных, для использования в интерфейсе
//
// Параметры:
//  ОбъектМетаданных					 - СправочникСслка.ИдентификаторыОбъектовМетаданных	 - Объект метаданных
//  ИмяТаблицы							 - Строка											 - Имя таблицы объекта
//  ОграничениеРеквизитовТабличнойЧасти	 - Булево											 - Установить ограничение полей табличной части
// 
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - Схема компоновки данных
//
Функция СоздатьСКДсОграничениямиПолей(ОбъектМетаданных, ИмяТаблицы = Неопределено, ОграничениеРеквизитовТабличнойЧасти = Истина) Экспорт	
	
	СКД = СоздатьСКД(ОбъектМетаданных, ИмяТаблицы);
	
	УстановитьОграниченияПоля(СКД, "Ссылка");
	
	Если ЗначениеЗаполнено(ИмяТаблицы) 
		И ОграничениеРеквизитовТабличнойЧасти
		Тогда
		УстановитьОграниченияПолейРеквизитов(СКД, ОбъектМетаданных);	
	КонецЕсли;
	
	Возврат СКД;
	
КонецФункции

// Создает Компоновщик настроек компоновки данных по имеющейся Схеме компоновки данных и возвращает его настройки
//
// Параметры:
//  СКД	 - СхемаКомпоновкиДанных - Схема компоновки данных
// 
// Возвращаемое значение:
//  НастройкиКомпоновкиДанных - Настройки компоновки данных
//
Функция ПолучитьНастройкиКомпоновки(СКД) Экспорт
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
		
КонецФункции

// Устанавливает настройки компоновки отбора объектов
//
// Параметры:
//  НастройкиКомпоновки	 - НастройкиКомпоновкиДанных - настройки компоновки
//  ИмяТаблицы			 - Строка					 - Имя таблицы объекта
//
Процедура УстановитьНастройкиКомпоновкиДляОтбораОбъектов(НастройкиКомпоновки, ИмяТаблицы = "") Экспорт

	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	НастройкиКомпоновки.Выбор.Элементы.Очистить();
	НастройкиКомпоновки.Структура.Очистить();

	ДобавитьПолеВыбора(НастройкиКомпоновки, "Ссылка");
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		ДобавитьПолеВыбора(НастройкиКомпоновки, ИмяТаблицы + ".НомерСтроки");	
	КонецЕсли;
	
	ДетальныеЗаписи = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
	ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));		
	
КонецПроцедуры

// Устанавливает настройки компоновки для проверки правил заполнения
//
// Параметры:
//  ИмяТаблицы			 - Строка					 - Имя таблицы объекта
//  НастройкиКомпоновки	 - НастройкиКомпоновкиДанных - настройки компоновки
//  Настройки			 - Массив					 - Контейнер отбора в виде массива структур, полученный методом ПоместитьОтборВМассив()
//
Процедура УстановитьНастройкиКомпоновкиДляПроверкиПравилЗаполнения(ИмяТаблицы, НастройкиКомпоновки, Настройки) Экспорт

	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	НастройкиКомпоновки.Выбор.Элементы.Очистить();
	НастройкиКомпоновки.Структура.Очистить();
	
	ДобавитьПолеВыбора(НастройкиКомпоновки, "Ссылка");	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		ДобавитьПолеВыбора(НастройкиКомпоновки, ИмяТаблицы + ".НомерСтроки");	
	КонецЕсли;
	
	УстановитьНастройкиКомпоновкиДляПроверкиПравилЗаполненияРекурсивно(ИмяТаблицы, НастройкиКомпоновки, Настройки);	
	
КонецПроцедуры

// Возвращает результат выполнения схемы компоновки данных
//
// Параметры:
//  СКД					 - СхемаКомпоновкиДанных	 - Схема компоновки данных
//  НастройкиКомпоновки	 - НастройкиКомпоновкиДанных - Настройки СКД
//  ТаблицаДанных		 - ТаблицаЗначений			 - Таблица с данными для помещения в источник СКД
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Результат выполнения СКД
//
Функция ПолучитьРезультатСКД(СКД, НастройкиКомпоновки, ТаблицаДанных) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	ВнешнийНаборДанных = Новый Структура(СКД.НаборыДанных.Получить(0).Имя, ТаблицаДанных);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных);	
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;	
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецФункции

#Область Отборы

// Возвращает новую структуру для сериализации отбора
//
// Параметры:
//  Тип	 - Тип	 - Тип структуры Тип("ГруппаЭлементовОтбораКомпоновкиДанных") ИЛИ Тип("ЭлементОтбораКомпоновкиДанных")
// 
// Возвращаемое значение:
//  Структура - Структура с пустыми полями отбора для заполнения
//
Функция НоваяСтруктураОтбора(Тип) Экспорт
	
	Если Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Структура = Новый Структура(
			"Тип, Элементы, Использование, Представление, Применение, РежимОтображения, ТипГруппы", 
			Тип
		);	
	ИначеЕсли Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Структура = Новый Структура(
			"Тип, ВидСравнения, Использование, ЛевоеЗначение, ПравоеЗначение, Представление, Применение, РежимОтображения", 
			Тип
		);
	Иначе
		ВызватьИсключение "Не корректный тип структуры отбора";
	КонецЕсли;
		
	Возврат Структура;
	
КонецФункции

// Помещает данные отбора компоновки данных в контейнер
//
// Параметры:
//  Отбор			 - ОтборКомпоновкиДанных - Отбор компоновки данных
// 
// Возвращаемое значение:
//  Массив - Контейнер отбора в виде массива структур
//
Функция ПоместитьОтборВМассив(Отбор) Экспорт
	
	Возврат ПоместитьОтборВМассивРекурсивно(Отбор);
	
КонецФункции

// Заполняет отбор компоновки данных контейнеру отбора в виде массива структур
//
// Параметры:
//  Отбор			 - ОтборКомпоновкиДанных - Отбор компоновки данных
//  НастройкиОтбора	 - Массив				 - Контейнер отбора в виде массива структур
//
Процедура ЗаполнитьОтборИзМассива(Отбор, НастройкиОтбора) Экспорт
	
	Отбор.Элементы.Очистить();
	
	ЗаполнитьОтборИзМассиваРекурсивно(Отбор.ДоступныеПоляОтбора, Отбор.Элементы, НастройкиОтбора);		
	
КонецПроцедуры

// Возвращает представление отбора
//
// Параметры:
//  НастройкиОтбора	 - Массив	 - Контейнер отбора в виде массива структур
// 
// Возвращаемое значение:
//  Строка - Представление отбора
//
Функция СформироватьПредставлениеПоОтбору(НастройкиОтбора) Экспорт
	
	МассивПолей = Новый Массив;
	ПолучитьМассивПолейОтбора(НастройкиОтбора, МассивПолей);	
	МассивПолей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПолей);
	
	Возврат СтрСоединить(МассивПолей, "; ");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Отборы

Функция ПоместитьОтборВМассивРекурсивно(Отбор)
	
	Контейнер = Новый Массив;
	
	Для каждого Элемент Из Отбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Структура = НоваяСтруктураОтбора(ТипЗнч(Элемент));
			ЗаполнитьЗначенияСвойств(Структура, Элемент);			
			Структура.Элементы = ПоместитьОтборВМассивРекурсивно(Элемент);	
			Контейнер.Добавить(Структура);
		Иначе
			Структура = НоваяСтруктураОтбора(ТипЗнч(Элемент));
			ЗаполнитьЗначенияСвойств(Структура, Элемент);
			Контейнер.Добавить(Структура);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Контейнер;
	
КонецФункции

Процедура ЗаполнитьОтборИзМассиваРекурсивно(ДоступныеПоляОтбора, ЭлементыОтбора, Контейнер)
	
	Для каждого СтруктураОтбора Из Контейнер Цикл		
		Если СтруктураОтбора.Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Элемент = ЭлементыОтбора.Добавить(СтруктураОтбора.Тип);
			ЗаполнитьЗначенияСвойств(Элемент, СтруктураОтбора, , "Элементы");
			ЗаполнитьОтборИзМассиваРекурсивно(ДоступныеПоляОтбора, Элемент.Элементы, СтруктураОтбора.Элементы);	
			
		Иначе
			Если ДоступныеПоляОтбора.НайтиПоле(СтруктураОтбора.ЛевоеЗначение) <> Неопределено Тогда
				Элемент = ЭлементыОтбора.Добавить(СтруктураОтбора.Тип);
				ЗаполнитьЗначенияСвойств(Элемент, СтруктураОтбора);
				
			Иначе
				Текст = "Поле " + СтруктураОтбора.ЛевоеЗначение + " не доступно для отбора";
				ОбщегоНазначения.СообщитьПользователю(Текст);
				ЗаписьЖурналаРегистрации("КЗО.ЗаполнитьОтбор", УровеньЖурналаРегистрации.Ошибка, , , Текст);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры

Функция ПолучитьМассивПолейОтбора(Отбор, МассивПолей)
	
	Для каждого СтруктураОтбора Из Отбор Цикл
		Если НЕ СтруктураОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураОтбора.Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПолучитьМассивПолейОтбора(СтруктураОтбора.Элементы, МассивПолей);	
		Иначе
			Текст = СтрШаблон("%1 %2 %3", 
				Строка(СтруктураОтбора.ЛевоеЗначение),
				ВидСравненияВСтроку(СтруктураОтбора.ВидСравнения),
				Строка(СтруктураОтбора.ПравоеЗначение)
			);
			МассивПолей.Добавить(СокрЛП(Текст));
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПолей;	
		
КонецФункции

Функция ВидСравненияВСтроку(ВидСравнения)
	
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Текст = "Заполнено";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		Текст = "Не заполнено";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		Текст = "=";	
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Текст = "<>";	
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Текст = "В списке";	
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Текст = "Не в списке";	
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Текст = "В иерархии";	
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Текст = "Не в иерархии";	
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Текст = "В списке по иерархии";	
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Текст = "Не в списке по иерархии";	
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
		Текст = "Содержит";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Текст = "Не содержит";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда
		Текст = "Подобно";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
		Текст = "Не подобно";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		Текст = ">";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Текст = "<";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Текст = ">=";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Текст = "<=";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
		Текст = "Начинается с";	
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
		Текст = "Не начинается с";	
		
	Иначе
		Текст = "";
	КонецЕсли;
	
	Возврат Текст;
		
КонецФункции

#КонецОбласти 

#Область НастройкиКомпоновки

Процедура УстановитьНастройкиКомпоновкиДляПроверкиПравилЗаполненияРекурсивно(ИмяТаблицы, НастройкиКомпоновки, Настройки)

	Для каждого СтруктураОтбора Из Настройки Цикл
		Если НЕ СтруктураОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
	
		ДобавитьОтборВНастройкиКомпоновки(НастройкиКомпоновки, СтруктураОтбора);
		
		Если СтруктураОтбора.Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			УстановитьНастройкиКомпоновкиДляПроверкиПравилЗаполненияРекурсивно(ИмяТаблицы, НастройкиКомпоновки, СтруктураОтбора.Элементы);	
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДобавитьОтборВНастройкиКомпоновки(НастройкиКомпоновки, СтруктураОтбора)
	
	ДобавитьПользовательскуюНастройку(НастройкиКомпоновки, СтруктураОтбора);
	
	Группировка = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ДобавитьПолеВыбора(Группировка, СтруктураОтбора.ПутьКДанным);
	
	ДобавитьОтборВНастройкиКомпоновкиРекурсивно(СтруктураОтбора, Группировка.Отбор);
		
КонецПроцедуры

Процедура ДобавитьОтборВНастройкиКомпоновкиРекурсивно(СтруктураОтбора, Отбор)

	ЭлементОтбора = Отбор.Элементы.Добавить(СтруктураОтбора.Тип);
	ЗаполнитьЗначенияСвойств(ЭлементОтбора, СтруктураОтбора);
	
	Если СтруктураОтбора.Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Для каждого ВложеннаяСтруктураОтбора Из СтруктураОтбора.Элементы Цикл
			Если НЕ ВложеннаяСтруктураОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
		
			ДобавитьОтборВНастройкиКомпоновкиРекурсивно(ВложеннаяСтруктураОтбора, ЭлементОтбора);	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьПользовательскуюНастройку(НастройкиКомпоновки, СтруктураОтбора)
	
	// Ищем старый
	Если СтруктураОтбора.Свойство("ПутьКДанным")
		И ЗначениеЗаполнено(СтруктураОтбора.ПутьКДанным)
		Тогда
		
		Для каждого Элемент Из НастройкиКомпоновки.ПользовательскиеПоля.Элементы Цикл
			Если Элемент.ПутьКДанным = СтруктураОтбора.ПутьКДанным Тогда
				Возврат Элемент;	
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
	// Добавляем новый
	Элемент = НастройкиКомпоновки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
	Элемент.УстановитьВыражения("Истина", "");

	СтруктураОтбора.Вставить("ПутьКДанным", Элемент.ПутьКДанным);
	
	Возврат Элемент;
		
КонецФункции

#Область Операции

Процедура ДобавитьПолеГруппировки(Группировка, ПутьКДанным)

	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ПутьКДанным);	
	
КонецПроцедуры

Процедура ДобавитьПолеВыбора(Группировка, ПутьКДанным)
	
	ВыбранноеПоле = Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПутьКДанным);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СКД 

Функция ДанныеСКДПолучитьПустуюТаблицу(Метаданные, ИмяТаблицы)
	
	ТаблицаДанных = Новый ТаблицаЗначений;	
	
	// Создадим СтандартныеРеквизиты
	Для Каждого Реквизит Из Метаданные.СтандартныеРеквизиты Цикл		
		ТаблицаДанных.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
	КонецЦикла;	
	
	// Создадим Реквизиты
	Для Каждого Реквизит Из Метаданные.Реквизиты Цикл
		ТаблицаДанных.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		// Создадим табличную часть
		ТабличнаяЧасть = Метаданные.ТабличныеЧасти[ИмяТаблицы];
		
		// Создадим СтандартныеРеквизиты
		Для Каждого Реквизит Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			ИмяКолонки = ИмяТаблицы + РазделительРеквизитаТабличнойЧасти() + Реквизит.Имя;
			ТаблицаДанных.Колонки.Добавить(ИмяКолонки, Реквизит.Тип);			
		КонецЦикла;
		
		// Создадим Реквизиты
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			ИмяКолонки = ИмяТаблицы + РазделительРеквизитаТабличнойЧасти() + Реквизит.Имя;
			ТаблицаДанных.Колонки.Добавить(ИмяКолонки, Реквизит.Тип);			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура УстановитьСтруктуруПолейСКД(НаборДанных, ОбъектМетаданных, ИмяТаблицы)
	
	Мета = ОбъектМетаданных.ЗначениеПустойСсылки.Метаданные();
	
	// Добавляем реквизиты объекта	
	Для Каждого Реквизит Из Мета.СтандартныеРеквизиты Цикл
		ДобавитьКолонкуВСКД(НаборДанных, Реквизит.Тип, Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;	
	
	Для Каждого Реквизит Из Мета.Реквизиты Цикл
		ДобавитьКолонкуВСКД(НаборДанных, Реквизит.Тип, Реквизит.Имя, Реквизит.Синоним);		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		// Добавляем реквизиты табличной части
		ТабличнаяЧасть = Мета.ТабличныеЧасти[ИмяТаблицы];
		
		Для каждого Реквизит Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			ДобавитьКолонкуВТаблицуСКД(НаборДанных, ИмяТаблицы, Реквизит.Тип, Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
		Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			ДобавитьКолонкуВТаблицуСКД(НаборДанных, ИмяТаблицы, Реквизит.Тип, Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьКолонкуВСКД(НаборДанных, Тип, Имя, Представление)
	
	ПолеНабора = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	ПолеНабора.Поле        = Имя;	
	ПолеНабора.ПутьКДанным = Имя;	
	ПолеНабора.Заголовок   = Представление;	
	ПолеНабора.ТипЗначения = Тип;
	
	ПолеНабора.ОграничениеИспользованияРеквизитов.Поле = Истина;
	
	Возврат ПолеНабора;
		
КонецФункции

Функция ДобавитьКолонкуВТаблицуСКД(НаборДанных, ИмяТаблицы, Тип, Имя, Представление)
	
	ПолеНабора = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	ПолеНабора.Поле        = ИмяТаблицы + РазделительРеквизитаТабличнойЧасти() + Имя;	
	ПолеНабора.ПутьКДанным = ИмяТаблицы + "." + Имя;	
	ПолеНабора.Заголовок   = Представление;	
	ПолеНабора.ТипЗначения = Тип;
	
	Возврат ПолеНабора;
		
КонецФункции

Процедура УстановитьОграниченияПоля(СКД, ИмяПоля) Экспорт
	
	ПолеНабора = СКД.НаборыДанных.НаборДанных.Поля.Найти(ИмяПоля);
	ПолеНабора.ОграничениеИспользования.Группировка = Истина;
	ПолеНабора.ОграничениеИспользования.Порядок = Истина;
	ПолеНабора.ОграничениеИспользования.Условие = Истина;
	ПолеНабора.ОграничениеИспользования.Поле = Истина;
	
	ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
	ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок = Истина;
	ПолеНабора.ОграничениеИспользованияРеквизитов.Условие = Истина;
	ПолеНабора.ОграничениеИспользованияРеквизитов.Поле = Истина;
		
КонецПроцедуры

Процедура УстановитьОграниченияПолейРеквизитов(СКД, ОбъектМетаданных)
	
	Мета = ОбъектМетаданных.ЗначениеПустойСсылки.Метаданные();
	
	Для Каждого Реквизит Из Мета.СтандартныеРеквизиты Цикл
		УстановитьОграниченияПоля(СКД, Реквизит.Имя);
	КонецЦикла;	
	
	Для Каждого Реквизит Из Мета.Реквизиты Цикл
		УстановитьОграниченияПоля(СКД, Реквизит.Имя);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
