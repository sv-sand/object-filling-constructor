
#Область ПрограммныйИНтерфейс

#Область ПодпискаНаСобытия

// Обработчик подписки на событие ОбработкаЗаполнения
//
// Параметры:
//  Источник			 - Объект	 - Заполняемый объект
//  ДанныеЗаполнения	 - Структура - Данные заполнения
//  ТекстЗаполнения		 - Строка	 - Текст заполнения
//  СтандартнаяОбработка - Булево	 - Использовать стандартную обработку
//
Процедура ОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.кзоОбъектыДляЗаполнения.Тип;
	Если ОписаниеТипов.СодержитТип(ТипЗнч(Источник)) = Неопределено Тогда
		Возврат;			
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Событие = Перечисления.кзоСобытияЗаполнения.ЗаполнениеНаОсновании;
		
	ИначеЕсли Источник.ЭтоНовый() Тогда
		Событие = Перечисления.кзоСобытияЗаполнения.Создание;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Заполнить(Источник, Событие); 
		
КонецПроцедуры

// Обработчик подписки на событие ПриКопировании
//
// Параметры:
//  Источник			 - Объект	 - Заполняемый объект
//  ОбъектКопирования	 - Объект	 - Копируемый объект
//
Процедура ПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.кзоОбъектыДляЗаполнения.Тип;
	Если ОписаниеТипов.СодержитТип(ТипЗнч(Источник)) = Неопределено Тогда
		Возврат;			
	КонецЕсли;
	
	Заполнить(Источник, Перечисления.кзоСобытияЗаполнения.Копирование);	
	
КонецПроцедуры

#КонецОбласти

// Заполняет объект по правилам
//
// Параметры:
//  Объект				 - СправочникОбъект, ДокументОбъект, ДанныеФормы - Объект для заполнения
//  Событие				 - Перечисления.кзоСобытияЗаполнения			 - Имя события заполнения
//  Форма				 - ФормаКлиентскогоПриложения					 - Форма
//  СобытиеЭлементаФормы - Справочник.кзоСобытияЭлементовФорм			 - Событие элемента формы
// 
// Возвращаемое значение:
//  Булево - Истина, если объект был заполнен. Ложь, если не удалось заполнить объект
//
Функция Заполнить(Объект, Событие, Форма = Неопределено, СобытиеЭлементаФормы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получаем подходящие правила
	Дата = кзоСлужебные.ПолучитьДатуОбъекта(Объект);
	
	ПакетЗапроса = ПолучитьПравилаЗаполнения(Объект, Дата, ПараметрыСеанса.ТекущийПользователь, Событие, СобытиеЭлементаФормы);
	РезультатПравила = ПакетЗапроса.Получить(ПакетЗапроса.Количество() - 2);
	РезультатЗаполнение = ПакетЗапроса.Получить(ПакетЗапроса.Количество() - 1);
	
	Если РезультатПравила.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Обрабатываем объект по правилам
	Правило = РезультатПравила.Выбрать();
	ПравилаЗаполнения = РезультатЗаполнение.Выбрать();
	
	ОбъектЗаполнен = Ложь;	
	Пока Правило.Следующий() Цикл	
		Если НЕ ПроверитьОбъектПоОтбору(Объект, Правило) Тогда
			Продолжить;
		КонецЕсли;
		
		ПравилаЗаполнения.Сбросить();
		ЗаполнитьОбъект(Объект, Форма, Правило, ПравилаЗаполнения);		
		ОбъектЗаполнен = Истина;		
	КонецЦикла;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

// Возвращает Истина, если требуется выводить команду "Заполнить" на орму объекта
//
// Параметры:
//  ОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Объект метаданных
// 
// Возвращаемое значение:
//  Булево - Если тредуется вывести команду на форму объекта
//
Функция ПоказыватьКомандуЗаполнитьДляОбъекта(ОбъектМетаданных) Экспорт

	ПакетЗапроса = ПолучитьПравилаЗаполнения(ОбъектМетаданных, Дата(1, 1, 1), ПараметрыСеанса.ТекущийПользователь, Перечисления.кзоСобытияЗаполнения.НажатиеНаКнопку);
	РезультатПравила = ПакетЗапроса.Получить(ПакетЗапроса.Количество() - 2);
	
	Возврат НЕ РезультатПравила.Пустой();
	
КонецФункции

// Возвращает флаг используется отбор для правила заполнения в зависимости от вида события
//
// Параметры:
//  ВидСобытия	 - Перечисление.кзоВидыСобытийПравилЗаполнения	 - Вид события
// 
// Возвращаемое значение:
//  Булево - Истина, если требуется отбор
//
Функция ИспользуетсяОтбор(ВидСобытия) Экспорт

	Возврат ВидСобытия = ПредопределенноеЗначение("Перечисление.кзоВидыСобытийПравилЗаполнения.Заполнение")
		ИЛИ ВидСобытия = ПредопределенноеЗначение("Перечисление.кзоВидыСобытийПравилЗаполнения.СобытиеЭлементаФормы");
	
КонецФункции

#КонецОбласти

#Область Правила

Функция ПолучитьПравилаЗаполнения(Объект, Дата, Пользователь, Событие, СобытиеЭлементаФормы = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект.Ссылка));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыПользователей.Ссылка КАК Группа
		|ПОМЕСТИТЬ ВТГруппыПользователя
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователей
		|ГДЕ
		|	ГруппыПользователей.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Правила.Ссылка КАК Правило
		|ПОМЕСТИТЬ ВТАктивныеПравила
		|ИЗ
		|	Справочник.кзоПравилаЗаполнения КАК Правила
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.кзоПравилаЗаполнения.СобытияЭлементовФорм КАК События
		|		ПО Правила.Ссылка = События.Ссылка
		|			И (События.СобытиеЭлементаФормы = &СобытиеЭлементаФормы)
		|ГДЕ
		|	Правила.ОбъектМетаданных = &ОбъектМетаданных
		|	И Правила.Активно
		|	И НЕ Правила.ПометкаУдаления
		|	И (&Дата = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ВЫБОР
		|					КОГДА Правила.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Правила.НачалоПериода >= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА Правила.КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Правила.КонецПериода <= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|				КОНЕЦ)
		|	И ВЫБОР
		|			КОГДА &Событие = ЗНАЧЕНИЕ(Перечисление.кзоСобытияЗаполнения.Создание)
		|				ТОГДА Правила.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.кзоВидыСобытийПравилЗаполнения.СозданиеНового)
		|						И Правила.ИспользоватьПриСоздании
		|			КОГДА &Событие = ЗНАЧЕНИЕ(Перечисление.кзоСобытияЗаполнения.Копирование)
		|				ТОГДА Правила.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.кзоВидыСобытийПравилЗаполнения.СозданиеНового)
		|						И Правила.ИспользоватьПриКопировании
		|			КОГДА &Событие = ЗНАЧЕНИЕ(Перечисление.кзоСобытияЗаполнения.ЗаполнениеНаОсновании)
		|				ТОГДА Правила.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.кзоВидыСобытийПравилЗаполнения.Заполнение)
		|						И Правила.ИспользоватьПриЗаполнении
		|			КОГДА &Событие = ЗНАЧЕНИЕ(Перечисление.кзоСобытияЗаполнения.НажатиеНаКнопку)
		|				ТОГДА Правила.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.кзоВидыСобытийПравилЗаполнения.Заполнение)
		|						И Правила.ИспользоватьПриНажатииНаКнопку
		|			КОГДА &Событие = ЗНАЧЕНИЕ(Перечисление.кзоСобытияЗаполнения.СобытиеЭлементаФормы)
		|				ТОГДА Правила.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.кзоВидыСобытийПравилЗаполнения.СобытиеЭлементаФормы)
		|						И НЕ События.СобытиеЭлементаФормы ЕСТЬ NULL
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК ПриоритетПользователя,
		|	ВТАктивныеПравила.Правило КАК Правило
		|ПОМЕСТИТЬ ВТПравила
		|ИЗ
		|	ВТАктивныеПравила КАК ВТАктивныеПравила
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.кзоПравилаЗаполнения.ГруппыПользователей КАК ГруппыПользователей
		|		ПО ВТАктивныеПравила.Правило = ГруппыПользователей.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.кзоПравилаЗаполнения.Пользователи КАК ПравилаПользователей
		|		ПО ВТАктивныеПравила.Правило = ПравилаПользователей.Ссылка
		|ГДЕ
		|	ГруппыПользователей.Группа ЕСТЬ NULL
		|	И ПравилаПользователей.Пользователь ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВТАктивныеПравила.Правило
		|ИЗ
		|	ВТАктивныеПравила КАК ВТАктивныеПравила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.кзоПравилаЗаполнения.ГруппыПользователей КАК ГруппыПользователей
		|		ПО ВТАктивныеПравила.Правило = ГруппыПользователей.Ссылка
		|ГДЕ
		|	ГруппыПользователей.Группа В
		|			(ВЫБРАТЬ
		|				Т.Группа
		|			ИЗ
		|				ВТГруппыПользователя КАК Т)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВТАктивныеПравила.Правило
		|ИЗ
		|	ВТАктивныеПравила КАК ВТАктивныеПравила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.кзоПравилаЗаполнения.Пользователи КАК ПравилаПользователей
		|		ПО ВТАктивныеПравила.Правило = ПравилаПользователей.Ссылка
		|ГДЕ
		|	ПравилаПользователей.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТГруппыПользователя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТАктивныеПравила
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПравила.Правило КАК Ссылка,
		|	Правила.Приоритет КАК Приоритет,
		|	ВТПравила.ПриоритетПользователя КАК ПриоритетПользователя,
		|	Правила.ОбъектМетаданных КАК ОбъектМетаданных,
		|	Правила.ВидСобытия КАК ВидСобытия,
		|	Правила.ХранилищеНастроек КАК ХранилищеНастроек,
		|	Правила.ПрограммныйКод КАК ПрограммныйКод
		|ИЗ
		|	ВТПравила КАК ВТПравила
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.кзоПравилаЗаполнения КАК Правила
		|		ПО ВТПравила.Правило = Правила.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетПользователя,
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПравила.Ссылка КАК Правило,
		|	ТаблицаПравила.ИмяРеквизита КАК ИмяРеквизита,
		|	ТаблицаПравила.Значение КАК Значение
		|ИЗ
		|	Справочник.кзоПравилаЗаполнения.Заполнение КАК ТаблицаПравила
		|ГДЕ
		|	ТаблицаПравила.Ссылка В
		|			(ВЫБРАТЬ
		|				Т.Правило
		|			ИЗ
		|				ВТПравила КАК Т)
		|	И ТаблицаПравила.Использование";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОбъектМетаданных", ОбъектМетаданных);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Событие", Событие);
	Запрос.УстановитьПараметр("СобытиеЭлементаФормы", СобытиеЭлементаФормы);
	
	Возврат Запрос.ВыполнитьПакет();
			
КонецФункции

Функция ПроверитьОбъектПоОтбору(Объект, Правило)

	Если НЕ ИспользуетсяОтбор(Правило.ВидСобытия) Тогда
		Возврат Истина;			
	КонецЕсли;
	
	Настройки = Правило.ХранилищеНастроек.Получить();	
	Если Настройки = Неопределено 
		ИЛИ НЕ Настройки.Свойство("НастройкиОтбора")
		ИЛИ Настройки.НастройкиОтбора = Неопределено
		Тогда
		Возврат Истина;	
	КонецЕсли;
	
	СКД = кзоСКД.СоздатьСКД(Правило.ОбъектМетаданных);
	НастройкиКомпоновки = кзоСКД.ПолучитьНастройкиКомпоновки(СКД);
	
	кзоСКД.УстановитьНастройкиКомпоновкиДляОтбораОбъектов(НастройкиКомпоновки);
	кзоСКД.ЗаполнитьОтборИзМассива(НастройкиКомпоновки.Отбор, Настройки.НастройкиОтбора);
			
	ТаблицаДанных = кзоСКД.СоздатьДанныеСКД(Объект, "", Объект.Ссылка.Метаданные());
	Результат = кзоСКД.ПолучитьРезультатСКД(СКД, НастройкиКомпоновки, ТаблицаДанных);
	
	Возврат Результат.Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область Заполнение

Процедура ЗаполнитьОбъект(Источник, Форма, Правило, ПравилаЗаполнения)
	
	Пока ПравилаЗаполнения.НайтиСледующий(Правило.Ссылка, "Правило") Цикл			
		Источник[ПравилаЗаполнения.ИмяРеквизита] = ПравилаЗаполнения.Значение;				
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Правило.ПрограммныйКод) Тогда
		ВыполнитьПрограммныйКодВБезопасномРежиме(Источник, Форма, Правило.ПрограммныйКод);	
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьПрограммныйКодВБезопасномРежиме(Объект, Форма, Знач ПрограммныйКод)
	
	УстановитьБезопасныйРежим(Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МассивРазделителей = МодульРаботаВМоделиСервиса.РазделителиКонфигурации();
	Иначе
		МассивРазделителей = Новый Массив;
	КонецЕсли;
	
	Для Каждого ИмяРазделителя Из МассивРазделителей Цикл
		
		УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		
	КонецЦикла;
	
	Выполнить ПрограммныйКод;
	
КонецПроцедуры

#КонецОбласти

