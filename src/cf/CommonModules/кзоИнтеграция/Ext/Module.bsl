
#Область ПрограммныйИнтерфейс

// Интегрирует команду "Заполнить" Конструктора заполнения в формы объектов через механизм подключаемых комманд БСП.
//  Объекты к которым будет добавлена команда указываются в подписке на событие кзоОбработкаЗаполнения
//  Для интеграции в метод ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//  Требуется добавить строку кода:
//  	кзоИнтеграция.ДобавитьКомандуЗаполнить(Источники, Команды);
//
// Параметры:
//  Источники	 - ДеревоЗначений	 - сведения о поставщиках команд этой формы
//  Команды		 - ТаблицаЗначений	 - записать в этот параметр сформированные команды для вывода в подменю
//
Процедура ДобавитьКомандуЗаполнить(Источники, Команды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого Строка Из Источники.Строки Цикл		
		Если НЕ ДобавлятьКомандуЗаполнить(Строка.ТипСсылкиДанных) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ кзоЗаполнение.ПоказыватьКомандуЗаполнитьДляОбъекта(Строка.СсылкаМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьКомандуЗаполнитьВСписок(Команды, Строка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняем объект формы.
//  Параметры более подробно описаны в см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//
// Параметры:
//  ПараметрКоманды				 - Массив	 - Параметры команды БСП
//  ПараметрыВыполненияКоманды	 - Структура - Параметры команды БСП
//
Процедура КомандаЗаполнить(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт

	Если НЕ ПараметрыВыполненияКоманды.ЭтоФормаОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	Результат = кзоЗаполнение.Заполнить(ПараметрыВыполненияКоманды.Источник, Перечисления.кзоСобытияЗаполнения.НажатиеНаКнопку, ПараметрыВыполненияКоманды.Форма);
	
	Если Результат Тогда
		ПараметрыВыполненияКоманды.Форма.Модифицированность = Истина;
	Иначе	
		Ссылка = ПараметрыВыполненияКоманды.Источник.Ссылка;
		ТекстСообщения = СтрШаблон("ru='Не удалось заполнить объект. Не установлены правила заполнения.'");		
		ОбщегоНазначения.СообщитьПользователю(НСтр(ТекстСообщения));
		
		ЗаписьЖурналаРегистрации("КЗО.Заполнение.НажатиеНаКнопку", УровеньЖурналаРегистрации.Предупреждение, Ссылка.Метаданные(), Ссылка, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Подключаемый обработчик формы ПриСозданииНаСервере
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения	 - Форма
//
Процедура ПриСозданииНаСервере(Форма) Экспорт

	Если Форма.Параметры.Свойство("кзоНеИспользоватьПодсистему") 
		И Форма.Параметры.кзоНеИспользоватьПодсистему
		Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаСобытия = ПолучитьСобытияФормы(Форма.ИмяФормы);
	Если ВыборкаСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьПараметрыЗаполненияФормы(Форма);
	
	Пока ВыборкаСобытия.Следующий() Цикл
		ИзменитьОбработчикДляЭлементаФормы(Форма, ВыборкаСобытия);
	КонецЦикла;
	
КонецПроцедуры

// Создает данные формы для интеграции событий
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 -  Форма
// 
// Возвращаемое значение:
//  Структура - Данные формы
//
Функция СоздатьДанныеФормы(Форма) Экспорт
	
	Возврат кзоФормы.СоздатьДанныеФормы(Форма);
	
КонецФункции

// Подключаемый обработчик элемента формы
//
// Параметры:
//  СтруктураОбработчика - Структура - Структура обработчика
//
Процедура ВыполнитьОбработчик(Форма, СтруктураОбработчика) Экспорт
	
	кзоЗаполнение.Заполнить(Форма.Объект, Перечисления.кзоСобытияЗаполнения.СобытиеЭлементаФормы, Форма, СтруктураОбработчика.Событие);	
	
	Форма.Модифицированность = Истина;
		
КонецПроцедуры

// Получить подключаемые события элементов формы
// 
// Возвращаемое значение:
//  Массив - Массив строк с именами событий элементов формы
//
Функция ПолучитьПодключаемыеСобытияЭлементов() Экспорт

	МассивСобытий = Новый Массив;
	МассивСобытий.Добавить("Команда");
	МассивСобытий.Добавить("ПриИзменении");
	
	Возврат МассивСобытий;
	
КонецФункции

#КонецОбласти

#Область Служебные

Функция ДобавлятьКомандуЗаполнить(ТипСсылки)
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.кзоОбъектыДляЗаполнения.Тип;
	
	Если ТипЗнч(ТипСсылки) = Тип("Тип") Тогда
		Возврат ОписаниеТипов.СодержитТип(ТипСсылки) <> Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ТипСсылки) = Тип("ОписаниеТипов") Тогда
		Для каждого Тип Из ТипСсылки.Типы() Цикл
			Если ОписаниеТипов.СодержитТип(Тип) Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьКомандуЗаполнитьВСписок(Команды, СтрокаИсточника)
	
	Если СтрокаИсточника.Метаданные.ОсновнаяФормаОбъекта <> Неопределено Тогда
		ИмяФормы = СтрокаИсточника.Метаданные.ОсновнаяФормаОбъекта.Имя;
		
	ИначеЕсли ВРег(СтрокаИсточника.Вид) = "СПРАВОЧНИК" 
		ИЛИ ВРег(СтрокаИсточника.Вид) = "ПЛАНВИДОВХАРАКТЕРИСТИК"
		ИЛИ ВРег(СтрокаИсточника.Вид) = "ПЛАНСЧЕТОВ"
		ИЛИ ВРег(СтрокаИсточника.Вид) = "ПЛАНВИДОВРАСЧЕТА"
		Тогда
		ИмяФормы = "ФормаЭлемента";
		
	ИначеЕсли СтрокаИсточника.Вид = "ДОКУМЕНТ" Тогда
		ИмяФормы = "ФормаДокумента";
		
	КонецЕсли;

	Команда = Команды.Добавить();
	Команда.Вид = "ЗаполнениеОбъектов";
	Команда.Представление = НСтр("ru = 'Заполнить'");
	Команда.РежимЗаписи = "НеЗаписывать";
	Команда.ВидимостьВФормах = ИмяФормы;
	Команда.Обработчик = "кзоИнтеграция.КомандаЗаполнить";
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФорм

Процедура СоздатьПараметрыЗаполненияФормы(Форма)

	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("кзоПараметры", Новый ОписаниеТипов()));
	
	Форма.ИзменитьРеквизиты(Реквизиты);
	Форма.кзоПараметры = Новый Структура("КешОбработчиковСобытий", Новый Массив);
	
КонецПроцедуры

Функция ПолучитьСобытияФормы(ПолноеИмяФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	События.Ссылка КАК Ссылка,
		|	События.ИмяСобытия КАК ИмяСобытия,
		|	События.ОбъектМетаданных КАК ОбъектМетаданных,
		|	События.ИмяФормы КАК ИмяФормы,
		|	События.ИмяЭлемента КАК ИмяЭлемента,
		|	События.МоментВыполнения КАК МоментВыполнения
		|ИЗ
		|	Справочник.кзоСобытияЭлементовФорм КАК События
		|ГДЕ
		|	События.ПолноеИмяФормы = &ПолноеИмяФормы
		|	И НЕ События.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПолноеИмяФормы", ПолноеИмяФормы);
	
	Возврат Запрос.Выполнить().Выбрать();
		
КонецФункции

Процедура ИзменитьОбработчикДляЭлементаФормы(Форма, Событие)

	Элемент = Форма.Элементы.Найти(Событие.ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не удалось найти элемент %1 формы %2", 
		    Событие.ИмяЭлемента,
			Форма.ИмяФормы	
		);
	КонецЕсли;
	
	Если НЕ кзоФормы.ДействиеПрименимоДляЭлемента(Элемент, Событие.ИмяСобытия) Тогда
		Возврат;		
	КонецЕсли;
	
	// Добавляем типовое действие в кеш
	СтруктураОбработчика = кзоИнтеграцияКлиентСервер.НоваяСтруктураОбработчика();
	СтруктураОбработчика.ИмяЭлемента = Событие.ИмяЭлемента;
	СтруктураОбработчика.ИмяСобытия = Событие.ИмяСобытия;
	СтруктураОбработчика.Событие = Событие.Ссылка;
	СтруктураОбработчика.МоментВыполнения = Событие.МоментВыполнения;
	СтруктураОбработчика.ТиповоеДействие = "";
	СтруктураОбработчика.ТиповойОбработчик = "";
	
	Если ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
		ИзменитьОбработчикКнопки(Форма, Элемент, СтруктураОбработчика);				
	ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда	
		ИзменитьОбработчикПоляФормы(Форма, Элемент, СтруктураОбработчика);		
	Иначе
		ВызватьИсключение СтрШаблон("Не предусмотрен метод изменения действия для элемента %1 с типом %2", Элемент.Имя, ТипЗнч(Элемент));
	КонецЕсли;
		
	Форма.кзоПараметры.КешОбработчиковСобытий.Добавить(СтруктураОбработчика);
	
КонецПроцедуры

Процедура ИзменитьОбработчикКнопки(Форма, Элемент, СтруктураОбработчика)
	
	Если ЗначениеЗаполнено(Элемент.ИмяКоманды) Тогда
		СтруктураОбработчика.ИмяЭлемента = Элемент.ИмяКоманды;
		
		Команда = Форма.Команды.Найти(Элемент.ИмяКоманды);
		Если Команда = Неопределено Тогда
			ВызватьИсключение СтрШаблон("Не удалось найти команду %1 на форме %2", Элемент.ИмяКоманды, Форма.Имя);		
		КонецЕсли;
		
		СтруктураОбработчика.ТиповоеДействие = Команда.Действие;		
		Если ЗначениеЗаполнено(СтруктураОбработчика.ТиповоеДействие) Тогда
			СтруктураОбработчика.ТиповойОбработчик = СтруктураОбработчика.ТиповоеДействие + "(Команда)";	
		КонецЕсли;	
		
	КонецЕсли;
	
	// Установим новое действие
	Команда.Действие = "кзоПодключаемый_Команда";
		
КонецПроцедуры

Процедура ИзменитьОбработчикПоляФормы(Форма, Элемент, СтруктураОбработчика)

	СтруктураОбработчика.ТиповоеДействие = Элемент.ПолучитьДействие(СтруктураОбработчика.ИмяСобытия);			
	Если ЗначениеЗаполнено(СтруктураОбработчика.ТиповоеДействие) Тогда
		СтруктураОбработчика.ТиповойОбработчик = СтруктураОбработчика.ТиповоеДействие + "(Элемент)";	
	КонецЕсли;
			
	// Установим новое действие
	Элемент.УстановитьДействие("ПриИзменении", "кзоПодключаемый_ПриИзменении");
	
КонецПроцедуры

#КонецОбласти