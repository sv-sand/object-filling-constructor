
#Область КонструкторЗаполненияОбъектов

&НаКлиенте
Функция кзоПолучитьДанныеФормы() Экспорт 
	Возврат кзоПолучитьДанныеФормыНаСервере();	
КонецФункции

&НаСервере
Функция кзоПолучитьДанныеФормыНаСервере()
	Возврат кзоИнтеграция.СоздатьДанныеФормы(ЭтаФорма);	
КонецФункции

&НаСервере
Процедура кзоПодключаемый_ОбработчикНаСервере(СтруктураОбработчика)
	кзоИнтеграция.ВыполнитьОбработчик(ЭтаФорма, СтруктураОбработчика);		
КонецПроцедуры

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура кзоПодключаемый_ПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	ИмяСобытия = "ПриИзменении";
	СтруктураОбработчика = кзоИнтеграцияКлиентСервер.НайтиОбработчикВКешеФормы(ЭтаФорма, ИмяЭлемента, ИмяСобытия);
	
	Если СтруктураОбработчика.МоментВыполнения = ПредопределенноеЗначение("Перечисление.кзоМоментыВыполненияПодключаемыхОбработчиков.ВместоТиповогоОбработчика")
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураОбработчика.ТиповойОбработчик)
		Тогда
		кзоПодключаемый_ОбработчикНаСервере(СтруктураОбработчика);
		
	ИначеЕсли СтруктураОбработчика.МоментВыполнения = ПредопределенноеЗначение("Перечисление.кзоМоментыВыполненияПодключаемыхОбработчиков.ПередТиповымОбработчиком") Тогда
		кзоПодключаемый_ОбработчикНаСервере(СтруктураОбработчика);
		Выполнить(СтруктураОбработчика.ТиповойОбработчик);	
		
	ИначеЕсли СтруктураОбработчика.МоментВыполнения = ПредопределенноеЗначение("Перечисление.кзоМоментыВыполненияПодключаемыхОбработчиков.ПослеТиповогоОбработчика") Тогда
		Выполнить(СтруктураОбработчика.ТиповойОбработчик);
		кзоПодключаемый_ОбработчикНаСервере(СтруктураОбработчика);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кзоПодключаемый_Команда(Команда)
	
	ИмяЭлемента = Команда.Имя;
	ИмяСобытия = "Команда";
	СтруктураОбработчика = кзоИнтеграцияКлиентСервер.НайтиОбработчикВКешеФормы(ЭтаФорма, ИмяЭлемента, ИмяСобытия);
	
	Если СтруктураОбработчика.МоментВыполнения = ПредопределенноеЗначение("Перечисление.кзоМоментыВыполненияПодключаемыхОбработчиков.ВместоТиповогоОбработчика")
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураОбработчика.ТиповойОбработчик)
		Тогда
		кзоПодключаемый_ОбработчикНаСервере(СтруктураОбработчика);
		
	ИначеЕсли СтруктураОбработчика.МоментВыполнения = ПредопределенноеЗначение("Перечисление.кзоМоментыВыполненияПодключаемыхОбработчиков.ПередТиповымОбработчиком") Тогда
		кзоПодключаемый_ОбработчикНаСервере(СтруктураОбработчика);
		Выполнить(СтруктураОбработчика.ТиповойОбработчик);	
		
	ИначеЕсли СтруктураОбработчика.МоментВыполнения = ПредопределенноеЗначение("Перечисление.кзоМоментыВыполненияПодключаемыхОбработчиков.ПослеТиповогоОбработчика") Тогда
		Выполнить(СтруктураОбработчика.ТиповойОбработчик);
		кзоПодключаемый_ОбработчикНаСервере(СтруктураОбработчика);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
    
КонецПроцедуры

#КонецОбласти 

#Область Команды

&НаКлиенте
Процедура ПоказатьСообщение(Команда)
	
	ПоказатьПредупреждение(, "Тестовое сообщение", , "Тест");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// КонструкторЗаполнения.ПодключаемыеКоманды
	кзоИнтеграция.ПриСозданииНаСервере(ЭтаФорма);
	// Конец КонструкторЗаполнения.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	Объект.Контрагент = Неопределено;	
КонецПроцедуры

#КонецОбласти    
